{% extends 'back/base.html.twig' %}

{% block title %}Ajouter page au menu {{ parent() }}{% endblock %}
{% block pageTitle %}Ajouter page au menu{% endblock %}

{% block body %}
    {% block content %}

        <div class="container">
            <div class="pages-list">
                <h2 class="mb-4">Liste des pages</h2>
                <ul>
                    {% for page in pages %}
                        {% set isPageInMenu = false %}
                        {% for pageMenu in pagesMenu %}
                            {% if page.id == pageMenu.id %}
                                {% set isPageInMenu = true %}
                            {% endif %}
                        {% endfor %}

                        {% if not isPageInMenu %}
                            <li class="menu-list">
                                <div class="checkbox-container">
                                    <input type="checkbox" class="page-checkbox" id="checkbox{{ page.id }}" aria-checked="false" data-page-id="{{ page.id }}" data-page-title="{{ page.title }}">
                                    <label class="label" for="checkbox{{ page.id }}">{{ page.title }}</label>
                                </div>
                            </li>
                        {% endif %}
                    {% endfor %}
                </ul>
                <button class="form-button" type="button" id="saveButton">
                    {{ no_page_selected }}
                </button>
            </div>
            <div class="pages-list-added">
                <h2 class="mb-4">Page ajoutée(s)</h2>
                <ul id="sortable-menu">
                    {% for pageMenu in pagesMenu %}
                        <li class="menu-list" data-page-id="{{ pageMenu.id }}">
                            <i class="fa-regular fa-circle"></i> {{ pageMenu.title }}
                            <span>/</span>
                            <a href="{{ path('remove_page_from_menu', {'menuId': menu.id, 'pageId': pageMenu.id}) }}"><i class="text-white fa-solid fa-trash"></i></a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="pages-list-added">
                <h2 class="mb-4">Points d'accroche</h2>
                <form id="your_form_id" method="post" action="{{ path('app_menu_assign_hook', { 'id': app.request.attributes.get('id') }) }}">
                    <select name="hook_select" id="hook_select" data-menu-id="{{ app.request.attributes.get('id') }}">
                        {% for hook in unusedHooks %}
                            {% if menu.hook is not null and hook == menu.hook.name %}
                                <option value="{{ hook }}" disabled selected>{{ hook }} (déjà assigné à ce menu)</option>
                            {% else %}
                                <option value="{{ hook }}">{{ hook }}</option>
                            {% endif %}
                        {% endfor %}
                    </select>
                    
                    {% if menu.hook is null %}
                        <button class="form-button" type="submit" id="submit_button">{{ btn_save }}</button>
                    {% endif %}
                </form>

            </div>
        </div>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://code.jquery.com/ui/1.13.1/jquery-ui.min.js"></script>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                var hookSelect = document.getElementById('hook_select');
                var currentUrl = window.location.href;
                var urlParams = new URLSearchParams(currentUrl);
                var id = urlParams.get('id');

                hookSelect.addEventListener('change', function() {
                    var selectedHook = this.value;

                    // Envoyer une requête AJAX pour mettre à jour le hook
                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', '/admin/modules/menu-de-navigation/' + id + '/assigner-hook', true); // Utiliser l'ID actuel dans l'URL
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState === 4 && xhr.status === 200) {
                            // Gérer la réponse de la requête
                            var response = xhr.responseText;
                            console.log(response); // Afficher la réponse dans la console
                        }
                    };
                    xhr.send('hook=' + selectedHook);
                });
            });
        </script>

        <script>
            $(function () {
                $("#sortable-menu").sortable({
                    update: function (event, ui) {
                        var menuItems = [];
                        $("#sortable-menu .menu-list").each(function (index) {
                            var pageId = $(this).data('page-id');
                            if (typeof pageId !== 'undefined') {
                                var menuItem = {
                                    page_id: pageId,
                                    position: index + 1
                                };
                                menuItems.push(menuItem);
                            }
                        });

                        // console.log("Menu items before sending AJAX request:", menuItems); // Log des données avant l'envoi de la requête AJAX

                        $.ajax({
                            url: "{{ path('update_menu_position') }}",
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(menuItems),
                            success: function (response) {
                                // console.log("Response from server:", response);
                            },
                            error: function (xhr, status, error) {
                                // console.error("Error while sending AJAX request:", xhr.responseText); // Log de l'erreur en cas d'échec de la requête AJAX
                            }
                        });
                    }
                });
            });
        </script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var checkboxes = document.querySelectorAll('.page-checkbox');
                var saveButton = document.getElementById('saveButton');
                var addingPageSection = document.createElement('div');
                addingPageSection.setAttribute('id', 'addingPageSection');

                checkboxes.forEach(function (checkbox) {
                    checkbox.addEventListener('change', function () {
                        var selectedPages = Array.from(checkboxes)
                            .filter(function (checkbox) {
                                return checkbox.checked;
                            });

                        // Ajuster le texte du bouton en fonction du nombre de pages sélectionnées
                        saveButton.textContent = selectedPages.length === 1 ? '{{ btn_add_page }}' : (selectedPages.length > 1 ? '{{ btn_add_pages }}' : '{{ no_page_selected }}');
                    });
                });

                saveButton.addEventListener('click', function () {
                    var selectedPages = Array.from(checkboxes)
                        .filter(function (checkbox) {
                            return checkbox.checked;
                        })
                        .map(function (checkbox) {
                            return checkbox.getAttribute('data-page-id');
                        });

                    var menuId = extractMenuIdFromUrl();

                    fetch('/add_pages_to_menu/' + menuId, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ pageIds: selectedPages }),
                    })
                        .then(function (response) {
                            if (!response.ok) {
                                throw new Error('{{ 'Failed to add pages to menu'|trans }}');
                            }
                            location.reload();
                        })
                        .catch(function (error) {
                            console.error(error.message);
                        });
                });

                function extractMenuIdFromUrl() {
                    var path = window.location.pathname;
                    var parts = path.split('/').filter(Boolean);
                    var menuId = parts[parts.length - 1];
                    console.log('Extracted menuId:', menuId);
                    return menuId;
                }

                // Ajouter addingPageSection à un élément existant sur la page, par exemple le body
                var body = document.querySelector('body');
                body.appendChild(addingPageSection);
            });
        </script>
    {% endblock %}
{% endblock %}
